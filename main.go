// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/hanson/go-toolbox/utils"
	"hertz-starter-kit/biz/router/middleware"
	"hertz-starter-kit/cache"
	"hertz-starter-kit/config"
	"hertz-starter-kit/db"
	log2 "hertz-starter-kit/utils/log"
	"log"
	"time"
)

func main() {
	log.SetFlags(log.LstdFlags)
	log.SetOutput(utils.GetMultiWriter(utils.HOUR))

	ctx := context.Background()
	ctx = context.WithValue(ctx, "trace_id", fmt.Sprintf("process_start_%d", time.Now().Unix()))

	// 配置
	utils.KeepNewDateLogFile()

	config.LoadConfig()

	go func() {
		defer func() {
			if err := recover(); err != nil {
				log.Printf("panic: %+v", err)
			}
		}()

		Ticker()
	}()

	// db 操作
	err := db.InitDb(ctx)
	if err != nil {
		log2.Errorf(ctx, "err: %+v", err)
		return
	}

	err = db.AutoMigrate(ctx)
	if err != nil {
		log2.Errorf(ctx, "err: %+v", err)
		return
	}

	h := server.Default(
		server.WithAutoReloadRender(true, 0),
		server.WithHostPorts(config.Cfg.HostPort),
	)

	h.Use(middleware.Cors())
	h.Use(middleware.LogTrace())
	middleware.InitAdminJwt()
	register(h)
	h.Spin()
}

func Ticker() {
	ticker := time.NewTicker(time.Minute)
	for {
		select {
		case <-ticker.C:
			now := time.Now()
			if now.Minute() == 0 {
				mw := utils.GetMultiWriter(utils.HOUR)
				db.UpdateLogger(utils.HOUR)
				cache.ResetRedisLogger()
				log.SetOutput(mw)
			}
		}
	}
}
